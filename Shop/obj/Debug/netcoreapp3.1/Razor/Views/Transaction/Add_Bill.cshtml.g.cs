#pragma checksum "D:\Shop\Shop\Views\Transaction\Add_Bill.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a1a9ba52371f7ec5c5ff01c00a4c8f4b154627d6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Transaction_Add_Bill), @"mvc.1.0.view", @"/Views/Transaction/Add_Bill.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Shop\Shop\Views\_ViewImports.cshtml"
using Shop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Shop\Shop\Views\_ViewImports.cshtml"
using Shop.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a1a9ba52371f7ec5c5ff01c00a4c8f4b154627d6", @"/Views/Transaction/Add_Bill.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cc6b55325b0ab971ba758bcc34a0cc77645e073f", @"/Views/_ViewImports.cshtml")]
    public class Views_Transaction_Add_Bill : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Shop\Shop\Views\Transaction\Add_Bill.cshtml"
  
    ViewData["Title"] = "เพิ่มบิล";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a1a9ba52371f7ec5c5ff01c00a4c8f4b154627d63117", async() => {
                WriteLiteral("\r\n    <div class=\"text-center\">\r\n        <h1>");
#nullable restore
#line 6 "D:\Shop\Shop\Views\Transaction\Add_Bill.cshtml"
       Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</h1>
    </div>
    <div class=""header col-3"">
        <b>หมายเลขบิล : </b>
        <b id=""bill_number"">Bill-XXX</b>
        <br>
        <b> วันที่ : </b>
        <input type=""date"" id=""date"">
    </div>


    <div class=""text-center"">
        <button id=""add_bill"">เพิ่มรายการ</button>
        <br><br>
        <table border=""1"" class=""center"" id=""Mytable""");
                BeginWriteAttribute("value", " value=\"", 486, "\"", 494, 0);
                EndWriteAttribute();
                WriteLiteral(@">
            <thead>
                <tr>
                    <th> ชื่อสินค้า </th>
                    <th> หน่วย </th>
                    <th> ราคา/หน่วย </th>
                    <th> จำนวน </th>
                    <th> ราคารวม </th>
                    <th> ส่วนลด </th>
                    <th> ราคารวมหลังส่วนลด </th>
                    <th> เครื่องมือ </th>
                </tr>
            </thead>
            <tbody id=""table_add_bill"">
            </tbody>
        </table>
        <br><br><br>
        <table class=""ft"">
            <tr>
                <th>ราคารวมก่อนส่วนลด :</th>
                <th id=""sum_before_discount"">0.00</th>
                <th>บาท</th>
            </tr>
            <tr>
                <th>ส่วนลดทั้งหมด :</th>
                <th id=""total_discount"">0.00</th>
                <th>บาท</th>
            </tr>
            <tr>
                <th>ราคารวมทั้งหมด :</th>
                <th id=""sum_after_discount"">0.00</th>
                <th>บาท");
                WriteLiteral("</th>\r\n            </tr>\r\n\r\n        </table>\r\n        <button onclick=\"save_bill()\">บันทึกรายการ</button>\r\n    </div>\r\n\r\n\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    let productlist;
    $(document).ready(function () {
        Getdata();
        setrow();
      //  setdate();
    });

    function delete_row(t) {
        const i = t.parentNode.parentNode.rowIndex;
        document.getElementById(""Mytable"").deleteRow(i);
        Calculate_Sum();
        Calculate_Discount();
        Calculate_Total();
    }


    function save_bill() {
        let valid;
        const table = document.getElementById(""Mytable"");
        const totalRowCount = table.rows.length;
        console.log(totalRowCount)
        const arry = [];
        const sum_af_dis = document.getElementById(""sum_after_discount"").innerHTML
        const sum_total_dis = document.getElementById(""total_discount"").innerHTML
        const sum_bf_dis = document.getElementById(""sum_before_discount"").innerHTML
        const dateTime = document.getElementById(""date"").value;
        if (dateTime == """") {
            document.getElementById(""date"").classList.add(""validate"");
     ");
            WriteLiteral(@"       valid = 0;
        } else {
            document.getElementById(""date"").classList.remove(""validate"");
        }
        //console.log(dateTime);
        const sad = parseFloat(sum_af_dis)
        const std = parseFloat(sum_total_dis)
        const sbf = parseFloat(sum_bf_dis)
        const obj = { PriceBefore: sbf, TotalDiscount: std, PriceAfter: sad, Date: dateTime }


        const sum = document.getElementsByClassName(""sumclass"");
        const dis = document.getElementsByClassName(""disclass"");    
        const total = document.getElementsByClassName(""totalcalss"");
        const count = document.getElementsByClassName(""countclass"");
        const select = document.getElementsByClassName(""selectclass"");

        for (let i = 0; i <= totalRowCount - 2; i++) {
            const sum_p = sum[i].innerHTML;
            const dis_p = dis[i].value;
            const total_p = total[i].innerHTML;
            const count_p = count[i].value;
            const value_p = select[i].value;
");
            WriteLiteral(@"

            if (count[i].value == """"  ) {
                const countnameid = document.getElementsByClassName(""countclass"")[i].id;
                document.getElementById(countnameid).classList.add(""validate"");
                valid = 0;
            } else {
                const countnameid = document.getElementsByClassName(""countclass"")[i].id;
                document.getElementById(countnameid).classList.remove(""validate"");
            }

            if (dis[i].value == """") {
                const disnameid = document.getElementsByClassName(""disclass"")[i].id;
                document.getElementById(disnameid).classList.add(""validate"");
                valid = 0;

            } else {
                const disnameid = document.getElementsByClassName(""disclass"")[i].id;
                document.getElementById(disnameid).classList.remove(""validate"");
            }

            if (select[i].value == """") {
                const selectnameid = document.getElementsByClassName(""selectclass"")");
            WriteLiteral(@"[i].id;
                document.getElementById(selectnameid).classList.add(""validate"");
                valid = 0;

            } else {
                const selectnameid = document.getElementsByClassName(""selectclass"")[i].id;
                document.getElementById(selectnameid).classList.remove(""validate"");
            }

            const id_pro = parseInt(value_p)
            const count_pro = parseInt(count_p)
            const dis_pro = parseFloat(dis_p)
            const sum_pro = parseFloat(sum_p)
            const total_pro = parseFloat(total_p)
            const idpro = { IdProduct: id_pro, Count: count_pro, Discount: dis_pro, TotalPrice: sum_pro, LastPrice: total_pro }
            arry.push(idpro)
        }
        
        if (valid == 0) {
            // alert(""valid"")
        } else {
            const data = {
                bill: obj,
                detail: arry

            }
            console.log(data)
            axios({
                method: 'post',
   ");
            WriteLiteral(@"             dataType: 'json',
                url: '/Transaction/insert_detail_bill ',
                data: data
            })
                .then(function (response) {
                    console.log(response.data)
                    document.location = 'Detail_Bill/?id=' + response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
        }


    }

    function Calculate_Sum() {
        let sumcal = 0;
        const sum = document.getElementsByClassName(""sumclass"");
        for (let i = 0; i < sum.length; i++) {
            let sumvalue = sum[i].innerHTML;
            let sumint = parseFloat(sumvalue)
            sumcal += sumint;
        }
        document.getElementById(""sum_before_discount"").innerHTML = sumcal.toFixed(2)
    }

    function Calculate_Discount() {
        let dis_cal = 0;
        let disint;
        const dis = document.getElementsByClassName(""disclass"");
        for (let i =");
            WriteLiteral(@" 0; i < dis.length; i++) {
            let disvalue = dis[i].value;
            if (disvalue == """") {
                disint = 0;
            } else {
                disint = parseFloat(disvalue)
            }
            dis_cal += disint;
        }
        document.getElementById(""total_discount"").innerHTML = dis_cal.toFixed(2)
    }

    function Calculate_Total() {

        let total_cal = 0;
        let totalint;
        const total = document.getElementsByClassName(""totalcalss"");
        for (let i = 0; i < total.length; i++) {
            let totalvalue = total[i].innerHTML;
            totalint = parseFloat(totalvalue)
            total_cal += totalint;
        }
        document.getElementById(""sum_after_discount"").innerHTML = total_cal.toFixed(2)

    }

    function setrow() {
        let count = 0;
        console.log(productlist);
        document.getElementById(""add_bill"").onclick = function () {
            console.log(productlist);
            count += 1;
     ");
            WriteLiteral(@"       const Table = document.getElementById('Mytable');
            const TableRow = Table.insertRow(-1);

            //**Stat Create Select Option **//
            const selectList = document.createElement(""select"");
            selectList.id = ""selectvalue"" + count;
            selectList.className = ""selectclass""
        //    selectList.value = ""xxx"";
            const cache = count;
            selectList.onchange = function () { //ฟังก์ชัน OnChange สินค้า
                let value1 = document.getElementById(""selectvalue"" + cache).value
                for (let x = 0; x < productlist.length; x++) {
                    if (value1 == productlist[x].product_Id) {
                        document.getElementById(""unit"" + cache).innerHTML = productlist[x].nameUnit;
                        document.getElementById(""price"" + cache).innerHTML = productlist[x].productPrice;
                    }
                }
                document.getElementById(""count"" + cache).value = """";
              ");
            WriteLiteral(@"  document.getElementById(""discount"" + cache).value = """";
                document.getElementById(""sum"" + cache).innerHTML = 0;
                document.getElementById(""total"" + cache).innerHTML = 0;
            }

            const option1 = document.createElement(""option"");
            option1.id = ""select"" + count;
            option1.text = ""เลือกสินค้า"";
            option1.value = """";
            selectList.appendChild(option1);
            for (let i = 0; i < productlist.length; i++) {
                const option = document.createElement(""option"");
                option.value = productlist[i].product_Id;
                option.text = productlist[i].nameProduct;
                selectList.appendChild(option);
            }
            //**End Create Select Option **//

            const input_count = document.createElement(""input""); //สร้าง element input จำนวนสินค้า
            input_count.id = ""count"" + count;
            input_count.type = ""number"";
            input_count.value");
            WriteLiteral(@" = """";
            input_count.className = ""countclass"",""is-invalid"";
           // input_count.required;
            input_count.onkeyup = function () { //ฟังก์ชัน OnKeyUp จำนวน
                let count_pro;
                let count_product = document.getElementById(""count"" + cache).value
                let price_product = document.getElementById(""price"" + cache).innerHTML
                if (count_product == """") {
                    count_pro = 0;
                } else {
                    count_pro = parseInt(count_product)
                }
                let price = parseFloat(price_product)
                let sum_product = 0;
                sum_product = price * count_pro;
                document.getElementById(""sum"" + cache).innerHTML = sum_product.toFixed(2)
                Calculate_Sum();
            }

            const unit = document.createElement(""h""); //สร้าง element แสดง หน่วยสินค้า
            unit.id = ""unit"" + count;
            unit.value = """";

           ");
            WriteLiteral(@" const price = document.createElement(""h""); //สร้าง element แสดงราคา/ชิ้น
            price.id = ""price"" + count;
            price.value = """";

            const sum = document.createElement(""h""); //สร้าง element แสดง ราคารวม
            sum.id = ""sum"" + count;
            sum.value = """";
            sum.className = ""sumclass"";

            const discount = document.createElement(""input"");//สร้าง element input ส่วนลด
            discount.id = ""discount"" + count;
            discount.className = ""disclass"";
           discount.value = """";
            discount.type = ""number"";

            discount.onkeyup = function () { //ฟังก์ชัน OnKeyUp ส่วนลด
                let sum_product = document.getElementById(""sum"" + cache).innerHTML
                let discount_product = document.getElementById(""discount"" + cache).value
                sum_pro = parseFloat(sum_product);
                dis_pro = parseFloat(discount_product);
                if (dis_pro > sum_pro) {
                    discount");
            WriteLiteral(@"_product = document.getElementById(""discount"" + cache).value = sum_product
                }
                let total_product = 0;
                total_product = sum_product - discount_product;
                document.getElementById(""total"" + cache).innerHTML = total_product.toFixed(2)

                Calculate_Discount();
                Calculate_Total();

            }

            const total = document.createElement(""h""); //สร้าง element แสดง ราคาทั้งหมด
            total.id = ""total"" + count;
            total.value = """";
            total.className = ""totalcalss"";

            const btn_delete = document.createElement(""input""); //สร้าง element button delete
            btn_delete.type = ""button"";
            btn_delete.onclick = function () {
                delete_row(this);
            };
            btn_delete.id = ""delete"" + count;
            btn_delete.value = ""ลบ"";

            let currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(selectList)");
            WriteLiteral(@";  //เลือกสินค้า

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(unit); // แสดงหน่วยสินค้า

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(price); //แสดงราคาสินค้า

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(input_count); //กรอกจำนวนสินค้า

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(sum); //คิดราคา ราคารวม = ราคา*จำนวน

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(discount); //กรอกส่วนลด

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(total); //รวมราคาทั้งหมด ราคารวม-ส่วนลด

            currentCell = TableRow.insertCell(-1);
            currentCell.appendChild(btn_delete); // ลบแถว


        }
    }

    function Getdata() {

        axios({
            method: 'Get',
            url: '/Transaction/GatdataProduct',
        })
     ");
            WriteLiteral(@"       .then(function (response) {
                //  console.log(response.data)
                productlist = response.data;

            });


    }

</script>
<style>


    .header {
        margin-left: 900px;
    }

    .ft {
        margin-left: 780px;
        width: 30%;
    }

    .center {
        width: 100%;
    }

    th {
        height: 50px
    }

    td {
        height: 50px
    }

    .validate {
        border-color: red;
    }
</style>





");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
